import type * as ResEdit from 'resedit';
export interface IconDefinition {
    id?: string | number;
    sourceFile: string;
    lang?: number;
}
export interface VersionDefinitionBase {
    comments?: string;
    companyName?: string;
    fileDescription?: string;
    fileVersion?: string;
    internalName?: string;
    legalCopyright?: string;
    legalTrademarks?: string;
    originalFileName?: string;
    privateBuild?: string;
    productName?: string;
    productVersion?: string;
    specialBuild?: string;
    extraValues?: Record<string, string>;
}
export interface VersionDefinitionTranslation extends VersionDefinitionBase {
    lang: number;
}
export interface VersionDefinition extends VersionDefinitionBase, Partial<ResEdit.Resource.VersionFixedInfo> {
    lang?: number;
    translations?: VersionDefinitionTranslation[];
}
export declare const PredefinedResourceTypeName: {
    readonly cursor: 1;
    readonly bitmap: 2;
    readonly icon: 3;
    readonly menu: 4;
    readonly dialog: 5;
    readonly string: 6;
    readonly fontdir: 7;
    readonly fontDir: 7;
    readonly font: 8;
    readonly accelerator: 9;
    readonly rcdata: 10;
    readonly rcData: 10;
    readonly messagetable: 11;
    readonly messageTable: 11;
    readonly groupcursor: 12;
    readonly groupCursor: 12;
    readonly groupicon: 14;
    readonly groupIcon: 14;
    readonly version: 16;
    readonly dlginclude: 17;
    readonly dlgInclude: 17;
    readonly plugplay: 19;
    readonly plugPlay: 19;
    readonly vxd: 20;
    readonly anicursor: 21;
    readonly aniCursor: 21;
    readonly aniicon: 22;
    readonly aniIcon: 22;
    readonly html: 23;
    readonly manifest: 24;
};
export type PredefinedResourceTypeName = (typeof PredefinedResourceTypeName)[keyof typeof PredefinedResourceTypeName];
export declare const PredefinedResourceTypeNameForDelete: {
    readonly allcursor: -1;
    readonly allCursor: -1;
    readonly allicon: -2;
    readonly allIcon: -2;
    readonly cursor: 1;
    readonly bitmap: 2;
    readonly icon: 3;
    readonly menu: 4;
    readonly dialog: 5;
    readonly string: 6;
    readonly fontdir: 7;
    readonly fontDir: 7;
    readonly font: 8;
    readonly accelerator: 9;
    readonly rcdata: 10;
    readonly rcData: 10;
    readonly messagetable: 11;
    readonly messageTable: 11;
    readonly groupcursor: 12;
    readonly groupCursor: 12;
    readonly groupicon: 14;
    readonly groupIcon: 14;
    readonly version: 16;
    readonly dlginclude: 17;
    readonly dlgInclude: 17;
    readonly plugplay: 19;
    readonly plugPlay: 19;
    readonly vxd: 20;
    readonly anicursor: 21;
    readonly aniCursor: 21;
    readonly aniicon: 22;
    readonly aniIcon: 22;
    readonly html: 23;
    readonly manifest: 24;
};
export type PredefinedResourceTypeNameForDelete = (typeof PredefinedResourceTypeNameForDelete)[keyof typeof PredefinedResourceTypeNameForDelete];
export interface RawResourceDefinitionData {
    type: string | number;
    id: string | number;
    lang?: number;
    file?: string;
    value?: string | ArrayBuffer | ArrayBufferView;
}
export interface RawResourceDefinitionData2 {
    typeName: PredefinedResourceTypeName;
    id: string | number;
    lang?: number;
    file?: string;
    value?: string | ArrayBuffer | ArrayBufferView;
}
export interface DeleteResourceDefinitionData {
    type: string | number;
    id?: string | number;
    lang?: number;
    failIfNoDelete?: boolean;
}
export interface DeleteResourceDefinitionData2 {
    typeName: PredefinedResourceTypeNameForDelete;
    id?: string | number;
    lang?: number;
    failIfNoDelete?: boolean;
}
export type DigestAlgorithmType = 'sha1' | 'sha224' | 'sha256' | 'sha384' | 'sha512' | 'sha512-224' | 'sha512-256' | 'sha3-224' | 'sha3-256' | 'sha3-384' | 'sha3-512' | 'shake128' | 'shake256';
export declare const CertificateSelectMode: {
    readonly Leaf: "leaf";
    readonly NoRoot: "no-root";
    readonly All: "all";
};
export type CertificateSelectMode = (typeof CertificateSelectMode)[keyof typeof CertificateSelectMode];
export declare const certificateSelectModeValues: string[];
export interface SigningDefinitionData {
    p12File?: string;
    privateKeyFile?: string;
    certificateFile?: string;
    certSelect?: CertificateSelectMode;
    password?: string;
    digestAlgorithm?: DigestAlgorithmType;
    timestampServer?: string;
}
export default interface DefinitionData {
    lang?: number;
    icons?: IconDefinition[];
    version?: VersionDefinition;
    raw?: Array<RawResourceDefinitionData | RawResourceDefinitionData2>;
    delete?: Array<DeleteResourceDefinitionData | DeleteResourceDefinitionData2>;
    sign?: SigningDefinitionData;
}
